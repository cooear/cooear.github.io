<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ShadowSocks | 酷耳]]></title>
  <link href="http://cooear.com/tags/shadowsocks/atom.xml" rel="self"/>
  <link href="http://cooear.com/"/>
  <updated>2016-05-12T09:53:41+08:00</updated>
  <id>http://cooear.com/</id>
  <author>
    <name><![CDATA[cooear]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amazon EC2免费虚拟主机搭建]]></title>
    <link href="http://cooear.com/blog/2016/05/create-amazon-web-services/"/>
    <updated>2016-05-09T16:38:32+08:00</updated>
    <id>http://cooear.com/blog/2016/05/create-amazon-web-services</id>
    <content type="html"><![CDATA[<p>国内特殊的网络环境使得科学上网的门槛越来越高，越来越难；网上各种免费的付费的代理也总是会有各种各样的问题(<a href="/blog/2014/08/lantern-deng-long-an-zhuang-he-shi-yong-jiao-cheng/">Lantern</a>还算是目前比较快速稳定安全的免费代理)；所以受够了别人家梯子的各种问题，那么今天就教各位搭建一个免费的专享带宽，超高速度，超低延迟梯子(AWS VPS)。</p>

<p>AWS（Amazon Web Services)，是亚马逊提供的在线虚拟主机服务。现在AWS提供的基础服务免费一年，流量每月15G，只要你不是天天上网下大文件的话，一般不会超。选择AWS，首先是因为它比较（bu）稳（yao）定（qian），并且它有东京的节点，网上很多其他主机商的节点都远在美国，距离近延迟低是一定的。</p>

<h3>一、Amazon EC2免费VPS申请</h3>

<ol>
<li>打开<a href="http://aws.amazon.com/">AWS官网</a></li>
<li>如果已有亚马逊账号可以直接使用那个账号登陆就好，没有的话注册一个(填写付款信息请认真添加后面要验证，只支持信用卡，银联Visa等都可以)</li>
</ol>


<!--more-->


<p><strong>注册付款信息页</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598101.jpg" title="EC2 注册付款信息" alt="EC2 注册付款信息" /></p>

<p>接下来是身份验证部分(填写真实的信息)，国家选中国，填入手机号（推荐）或者座机号（注意区号），分机没有的话留空就好了，然后点“立刻呼叫我”。</p>

<p><strong>身份验证</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598102.jpg" title="EC2 注册身份验证" alt="EC2 注册身份验证" /></p>

<p><strong>输入PIN码</strong></p>

<p>几十秒后就会有一个电话打来，等电话里的妹子说完话，输入PIN码</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598103.jpg" title="EC2 注册PIN码输入" alt="EC2 注册PIN码输入" /></p>

<p><strong>完成身份验证</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598104.jpg" title="EC2 注册完成身份验证" alt="EC2 完成身份验证" /></p>

<p>点击“继续选择支持方案”。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598105.jpg" title="EC2 注册选择支持方案" alt="EC2 选择支持方案" /></p>

<p>选择“基本（免费）”点“继续”。</p>

<p><strong>这时账户创建成功，点击"启动管理控制台"</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598106.jpg" title="EC2 启动管理控制台" alt="EC2 启动管理控制台" /></p>

<p>注：AWS采用的是基础服务免费，超出基础服务以外的部分收费。比如说一个月流量超出15G的话是会收钱的。收钱的时候是直接卡里扣不会通知你的。</p>

<h3>二、新建EC2</h3>

<p><strong>进入AWS主页，选择第一个：EC2</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598107.jpg" title="EC2 启动管理控制台" alt="EC2 启动管理控制台" /></p>

<p>进入EC2控制台，推荐选择右上角的"亚太地区（东京）"，然后点击“EC2”；可能会出现下图的情况，请确保付款信息那里完全真实，然后耐心等待吧。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598108.jpg" title="EC2 审核" alt="EC2 审核" /></p>

<p>如果点击“EC2”后一切正常，那么应该看到如下界面，点击“启动实例”:</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598109.jpg" title="EC2 启动实例" alt="EC2 启动实例" /></p>

<p><strong>选择符合条件的免费套ubuntu</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598110.jpg" title="EC2选择免费的Ubuntu" alt="EC2选择免费的Ubuntu" /></p>

<p>注意：不带免费字样的都是收费的。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598111.jpg" title="EC2选择免费的Ubuntu" alt="EC2选择免费的Ubuntu" /></p>

<p><strong>直接点击“启动”</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598112.jpg" title="EC2启动Ubuntu实例" alt="EC2启动Ubuntu实例" /></p>

<p><strong>创建新密钥对，输入名称，点击下载密钥对（一个r3.pem文件），保存到电脑上，点击 启动实例</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598113.jpg" title="EC2创建新密钥对" alt="EC2创建新密钥对" /></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598114.jpg" title="EC2创建新密钥对" alt="EC2创建新密钥对" /></p>

<p>在上图“密钥对名称”中输入一个你想要的名称如：r3.pem，然后点击“下载密钥对”就会下载一个r3.pem的文件，请将该文件保存到一个绝对安全的地方（该文件将是你登陆AWS服务器的凭证），然后启动实例。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598115.jpg" title="启动EC2实例" alt="启动EC2实例" /></p>

<p>这个时候AWS开始初始化的你的服务器节点，大概需要一两分钟;至此为止，你的服务器已经在遥远的东京开机啦。</p>

<p>点击上图第一个绿色框里你的服务器名字，这里是“i-405c2fe5”，跳转到以下页面。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598116.jpg" title="启动EC2实例" alt="启动EC2实例" /></p>

<p><strong>请记住下图两个重要信息(登录服务器时使用)</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598117.jpg" title="启动EC2实例" alt="启动EC2实例" /></p>

<p><strong>注意</strong>：因AWS每月提供750小时的免费实例时间，所以为了避免付费切忌开一个以上的实例。</p>

<h3>三、连接服务器</h3>

<ul>
<li>如果是Windows，请参考AWS官方教程<a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html">使用putty连接服务器</a>。</li>
<li>如果是Mac</li>
</ul>


<p>首先，找到刚刚保存的*.pem文件，比如文件名叫r3.pem，确认文件路径;打开终端，进到r3.pem文件所在目录;</p>

<p>执行 <font color=red>chmod 400 r3.pem</font> 修改文件权限</p>

<pre><code>chmod 400 r3.pem
</code></pre>

<p>执行如下命令即可连接上远程服务器(<strong>请将IP替换为你自己的共有IP或共有DNS</strong>)</p>

<pre><code>ssh -i r3.pem ubuntu@54.238.211.149
</code></pre>

<p><strong>注意</strong>:使用ssh命令连接实例时不同的系统使用的用户名是不一样的。对于Amazon Linux，用户名称是 ec2-user。对于 RHEL5，用户名称是 root 或 ec2-user。对于Ubuntu，用户名称是ubuntu。对于Fedora，用户名称是 fedora 或 ec2-user。对于SUSE Linux，用户名称是 root 或 ec2-user。另外，如果 ec2-user 和 root 无法使用，请与您的 AMI 供应商核实。</p>

<pre><code>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com
</code></pre>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598118.jpg" title="命令登陆EC2服务器" alt="命令登陆EC2服务器" /></p>

<p><strong>成功登陆服务器</strong></p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598119.jpg" title="成功登陆EC2服务器" alt="成功登陆EC2服务器" /></p>

<h3>四、安装ShadowSocks</h3>

<p><strong>1、 连接上服务器之后依次执行下面的命令（只需要复制//前面的命令并执行）</strong></p>

<pre><code>sudo -s                                     // 获取超级管理员权限
apt-get update                              // 更新apt-get
apt-get install python-pip                  // 安装python包管理工具pip
pip install shadowsocks                     // 安装shadowsocks
ssserver -c /etc/shadowsocks.json -d start  // 启动shadowsocks
</code></pre>

<p><strong>2、配置shadowsocks</strong></p>

<pre><code>vi /etc/shadowsocks.json
</code></pre>

<p>ps. 可能有人不会用vi，这里简单说下，vi打开文件后，按<strong>i</strong>即可进入编辑状态，编辑完后，按<strong>esc</strong>退出编辑状态，按<strong>:</strong>进入命令状态，输入<strong>wq</strong>即可保存并退出，还不懂的话自行百度<strong>vi</strong>吧</p>

<ul>
<li><p>单一端口(用户)配置：</p>

<pre><code>  {
      "server":"0.0.0.0",
      "server_port":端口,
      "local_address":"127.0.0.1",
      "local_port":1080,
      "password":"连接密码",
      "timeout":300,
      "method":"aes-256-cfb",
      "fast_open":false
  }
</code></pre></li>
<li><p>多端口(用户)配置：</p>

<pre><code>  {
      "server":"0.0.0.0",
      "port_password": {
          "端口1": "连接密码1",
          "端口2" : "连接密码2"
      },
      "timeout":300,
      "method":"aes-256-cfb",
      "fast_open": false
  }
</code></pre></li>
</ul>


<p><strong>3、开启AWS入站端口</strong></p>

<p>配置好shaodowsocks后，还需要将配置中的端口打开,这样客户端的服务才能链接得上EC2中的shadowsocks服务;首先打开正在运行的实例，向右滚动表格，看到最后一项“安全组”点击进入</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598120.jpg" title="EC2安全组配置" alt="EC2安全组配置" /></p>

<p>点击操作，编辑入站规则</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598121.png" title="EC2编辑入站规则" alt="EC2编辑入站规则" /></p>

<p>默认是开启了一个22端口（这是给ssh访问的），再建一个如下图红框标示的端口，我的shadowsocks配置的端口是8388，所以这里就开启8388。</p>

<p><img src="http://g1c1i0.cooear.com/images/uploads/2016/05/146278598122.png" title="EC2编辑入站规则" alt="EC2编辑入站规则" /></p>

<p>至此，AWS EC2免费主机上的SS已经搭建完毕，现在可以通过手机端的Shadowsocks客户端科学上网了，或者通过智能路由器实现<a href="/blog/2015/02/openwrtshi-yong-shadowsockstou-ming-dai-li-zhi-neng-fan-qiang-shang-wang/">家庭网络自动透明代理</a>;当然也可以在EC2上搭建方便移动端iPhone、iPad、Android等设备连接的VPN(PPTP相对不安全)服务。</p>

<p>海外VPS推荐：<a href="http://www.digitalocean.com">Digital Ocean</a>，<a href="http://www.linode.com">Linode</a> 和 <a href="http://www.vultr.com">Vultr</a>其它都属于不入流的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWrt使用ShadowSocks透明代理智能翻墙上网]]></title>
    <link href="http://cooear.com/blog/2015/02/openwrtshi-yong-shadowsockstou-ming-dai-li-zhi-neng-fan-qiang-shang-wang/"/>
    <updated>2015-02-14T10:00:09+08:00</updated>
    <id>http://cooear.com/blog/2015/02/openwrtshi-yong-shadowsockstou-ming-dai-li-zhi-neng-fan-qiang-shang-wang</id>
    <content type="html"><![CDATA[<p>　　<font color=red >本教程前提是需要有一个ShadowSocks账号或安装ShadowSocks服务的VPS（墙外的）</font>。</p>

<h3>一、安装<strong>OpenWrt</strong>并配置上网</h3>

<ol>
<li><p>telnet 192.168.1.1 至Openwrt并修改root密码</p>

<pre><code> telnet 192.168.1.1  
</code></pre></li>
<li><p>配置上网参数</p>

<pre><code> uci set network.wan.proto=pppoe
 uci set network.wan.username=name
 uci set network.wan.password=123456
 uci commit network ifup wan
</code></pre></li>
<li><p>安装luci界面，并配置开机启动</p>

<pre><code> opkg update
 opkg install luci
 /etc/init.d/uhttpd start
 /etc/init.d/uhttpd enable 
</code></pre></li>
<li><p>修改luci界面端口号</p>

<pre><code> vim /etc/config/uhttpd
</code></pre>

<p> <!--more--></p></li>
<li><p>修改ssh默认的22端口号</p>

<pre><code> vim /etc/config/dropbear
</code></pre></li>
<li><p>自定义DNS</p>

<p> <em>a.</em> 创建 /etc/config/sec_resolv.conf</p>

<pre><code> vim /etc/config/sec_resolv.conf
 nameserver 8.8.8.8
 nameserver 8.8.4.4
 nameserver 208.67.222.222
</code></pre>

<p> <em>b.</em>  编辑 /etc/config/dhcp</p>

<p> 找到 option resolvfile 选项，替换/tmp/resolv.conf.auto为/etc/config/sec_resolv.conf.</p></li>
</ol>


<h3>二、软件包安装</h3>

<p>执行命令：</p>

<pre><code>opkg update
</code></pre>

<p>shadowsocks-libev<a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/">下载</a>：</p>

<p>必须包安装：</p>

<p>olarssl版本的shadowsocks（polarssl体积更小）：</p>

<pre><code>opkg install iptables-mod-nat-extra ipset libpolarssl
</code></pre>

<p>普通版本（openssl）的shadowsocks，那么(openssl兼容性更好)：</p>

<pre><code>opkg install iptables-mod-nat-extra ipset libopenssl
</code></pre>

<p>卸载dnsmasq并安装dnsmasq-full以及相应的扩展包(dnsmasq没有ipset功能)</p>

<pre><code>opkg remove dnsmasq &amp;&amp; opkg install dnsmasq-full
cd /tmp
opkg install shadowsocks-libev_x.x.x-x_ar71xx.ipk
</code></pre>

<h3>三、配置</h3>

<ol>
<li><p>配置/etc/shadowsocks.json</p>

<pre><code> {
     "server": "X.X.X.X",
     "server_port": "443",
     "password": "password",
     "local_port": "1080",
     "method": "aes-256-cfb"
 }
</code></pre></li>
<li><p>修改/etc/init.d/shadowsocks ，其实就是把Client Mode注释掉再把Proxy Mode的注释去掉</p>

<pre><code> #!/bin/sh /etc/rc.common

 START=95

 SERVICE_USE_PID=1
 SERVICE_WRITE_PID=1
 SERVICE_DAEMONIZE=1
 SERVICE_PID_FILE=/var/run/shadowsocks.pid
 CONFIG=/etc/shadowsocks.json

 start() {
     # Client Mode
     #service_start /usr/bin/ss-local -c $CONFIG -f $SERVICE_PID_FILE
     # Proxy Mode
     service_start /usr/bin/ss-redir -c $CONFIG -f $SERVICE_PID_FILE
 }

 stop() {
     # Client Mode
     #service_stop /usr/bin/ss-local
     # Proxy Mode
     service_stop /usr/bin/ss-redir
 }
</code></pre></li>
<li><p>启动shadowsocks，并设置开机运行：</p>

<pre><code> /etc/init.d/shadowsocks enable
 /etc/init.d/shadowsocks start
</code></pre></li>
</ol>


<h3>四、配置dnsmasq和ipset</h3>

<ol>
<li><p>将iptables规则加入防火墙中（添加至/etc/rc.local可开机启动）</p>

<pre><code> ipset -N gfwlist iphash
 iptables -t nat -A PREROUTING -p tcp -m set –match-set gfwlist dst -j REDIRECT –to-port 1080
 iptables -t nat -A OUTPUT -p tcp -m set –match-set gfwlist dst -j REDIRECT –to-port 1080
</code></pre></li>
<li><p>修改/etc/dnsmasq.conf，在最后加入 conf-dir=/etc/dnsmasq.d ，新建并进入目录/etc/dnsmasq.d，并将my_dnsmasq.conf放入该目录。</p>

<p> my_dnsmasq.conf具体格式如下：</p>

<pre><code> #使用不受污染干扰的DNS解析该域名 可以将此IP改为自己使用的DNS服务器
 server=/google.com/208.67.222.222#443
 #将解析出来的IP保存到名为gfwlist的ipset表中
 ipset=/google.com/gfwlist
</code></pre></li>
</ol>


<h3>五、ss-tunnel转发UDP的DNS的请求</h3>

<pre><code>#!/bin/sh /etc/rc.common

START=95

SERVICE_USE_PID=1
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1
SERVICE_PID_FILE=/var/run/shadowsocks.pid
CONFIG=/etc/shadowsocks.json
DNS=8.8.8.8:53
TUNNEL_PORT=5353

start() {
    # Client Mode
    #service_start /usr/bin/ss-local -c $CONFIG -f $SERVICE_PID_FILE
    # Proxy Mode
    service_start /usr/bin/ss-redir -c $CONFIG -f $SERVICE_PID_FILE
    # Tunnel
    service_start /usr/bin/ss-tunnel -c $CONFIG -u -l $TUNNEL_PORT -L $DNS
}

stop() {
    # Client Mode
    #service_stop /usr/bin/ss-local
    # Proxy Mode
    service_stop /usr/bin/ss-redir
    # Tunnel
    service_stop /usr/bin/ss-tunnel
}
</code></pre>

<p><strong>注</strong>：至此路由器已经my_dnsmasq.conf里面的域名已经会自动使用ss代理翻墙</p>

<p><a href="/blog/2016/05/create-amazon-web-services/">免费VPS主机申请</a></p>
]]></content>
  </entry>
  
</feed>
